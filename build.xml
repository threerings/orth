<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="orth" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <!-- configuration parameters -->
  <property name="src.dir"     value="src/main/java"/>
  <property name="asrc.dir"     value="src/main/as"/>
  <property name="rsrc.dir"     value="src/main/resources"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="savedoc.dir"  value="docs"/>
  <property name="javadoc.home" value="${deploy.dir}/docs"/>
  <property name="classes.dir"  value="${deploy.dir}/classes"/>
  <property name="gwtjar.dir"  value="${deploy.dir}/gwt-jar"/>

  <property name="maven-ant.vers" value="2.1.1"/>
  <property name="maven-ant.dir" value="${user.home}/.m2/ant-support"/>
  <property name="maven-ant.jar" value="${maven-ant.dir}/maven-ant-tasks-${maven-ant.vers}.jar"/>
  <property name="maven-ant.url"
            value="http://mirrors.ibiblio.org/pub/mirrors/apache/maven/binaries"/>
  <condition property="maven-ant.exists"><available file="${maven-ant.jar}"/></condition>
  <target name="-download-maven-ant" unless="maven-ant.exists">
    <mkdir dir="${maven-ant.dir}"/>
    <get src="${maven-ant.url}/maven-ant-tasks-${maven-ant.vers}.jar"
         dest="${maven-ant.jar}" usetimestamp="true"/>
  </target>

  <target name="-init-maven-ant" depends="-download-maven-ant">
    <taskdef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="urn:maven-artifact-ant" classpath="${maven-ant.jar}"/>
    <artifact:pom id="pom" file="pom.xml"/>
    <artifact:dependencies pathId="compile.classpath" pomRefId="pom" useScope="compile"/>
    <artifact:dependencies pathId="testlibs.classpath" pomRefId="pom" useScope="test"/>

    <artifact:pom id="as-pom" file="as-pom.xml"/>
    <artifact:dependencies filesetId="aslibs.fileset" pomRefId="as-pom" useScope="compile"/>
    <copy todir="${deploy.dir}/lib">
      <fileset refid="aslibs.fileset"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <!-- -prepares the application directories -->
  <target name="-prepare" depends="-init-maven-ant">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${javadoc.home}"/>
    <path id="built.classpath">
      <path refid="compile.classpath"/>
      <pathelement location="${classes.dir}"/>
    </path>
  </target>

  <!-- makes sure our tools are compiled and defines the ant tasks -->
  <target name="-preptools" depends="-prepare">
    <taskdef resource="com/threerings/presents/tools.properties" classpathref="compile.classpath"/>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean">
    <delete dir="${deploy.dir}/classes"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.swc"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="-prepare">
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
      <fileset dir="${src.dir}" includes="**/*.tmpl"/>
    </copy>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="-checkaslib">
    <condition property="no_build_aslib">
      <not><available file="${flexsdk.dir}/lib/compc.jar"/></not>
    </condition>
    <condition property="no_rebuild_aslib"><or>
      <isset property="no_build_aslib"/>
      <uptodate targetfile="${deploy.dir}/${ant.project.name}lib.swc">
        <srcfiles dir="${asrc.dir}" includes="**/*.as"/>
      </uptodate>
    </or></condition>
  </target>
  <target name="-noteaslib" if="no_build_aslib"><echo>
    NOTE: not building ActionScript library. Pass -Dflexsdk.dir=DIR to
    activate ActionScript library build.
  </echo></target>

  <target name="aslib" unless="no_build_aslib" depends="-checkaslib,-noteaslib">
    <copy file="etc/aslib-config.xml.in" tofile="${deploy.dir}/aslib-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
        <filter token="lib_name" value="${ant.project.name}"/>
      </filterset>
    </copy>
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=${asrc.dir}"/>
      <arg value="-compiler.library-path=lib/tweener.swc"/>
      <arg value="-include-sources=src/main/as/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${ant.project.name}lib.swc"/>
    </java>
    <delete file="${deploy.dir}/aslib-config.xml"/>
  </target>

  <target name="javadoc" depends="-prepare">
    <javadoc sourcepath="${src.dir}" packagenames="com.threerings.*"
             destdir="${javadoc.home}" stylesheetfile="docs/stylesheet.css"
             additionalparam="-breakiterator"
             link="http://www.threerings.net/code/orth/docs/api">
      <classpath refid="compile.classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <!-- ant documentation is not available online, sorry kids -->
      <link href="file:///usr/share/doc/ant-doc/javadocs"/>
      <link href="http://samskivert.com/code/samskivert/samskivert/docs/api"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.home}" includes="**/*"/>
    </copy>
  </target>

  <!-- builds the ActionScript documention -->
  <target name="asdoc" unless="no_build_aslib" depends="-checkaslib">
    <mkdir dir="${deploy.dir}/asdocs"/>
    <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCashes=false"/>
      <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
      <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources ${asrc.dir}"/>
      <arg line="-output ${deploy.dir}/asdocs"/>
    </java>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="distall" depends="dist,javadoc,asdoc"/>

  <!-- builds our distribution files (war and jar) -->
  <target name="dist" depends="-prepare,compile,procstream,aslib">
    <!-- build our various jar files -->
    <jar destfile="${deploy.dir}/${ant.project.name}.jar" basedir="${classes.dir}"/>
    <copy todir="${gwtjar.dir}">
      <fileset dir="${rsrc.dir}" includes="com/**"/>
      <fileset dir="${src.dir}" includes="com/threerings/orth/scene/data/*.java"/>
      <fileset dir="${src.dir}" includes="com/threerings/orth/data/*.java"/>
    </copy>
    <jar destfile="${deploy.dir}/${ant.project.name}-gwt.jar" basedir="${gwtjar.dir}"/>
    <delete dir="${gwtjar.dir}"/>
  </target>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="-prepare">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="compile.classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="on" optimize="${build.optimize}"
           includeAntRuntime="false" deprecation="on" source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="-preptools"> 
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false" debug="on"
           optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </gendobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation service declarations -->
  <target name="genservice" depends="-preptools"> 
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false" debug="on"
           optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Service.java"/>
      <exclude name="**/InvocationService.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genservice header="lib/SOURCE_HEADER" asroot="src/main/as" classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Service.java">
        <exclude name="**/InvocationService.java"/>
        <exclude name="**/peer/**"/>
        <exclude name="**/admin/**"/>
      </fileset>
      <providerless service="ChatService"/>
      <providerless service="SimulatorService"/>
      <providerless service="TimeBaseService"/>
    </genservice>
    <genservice header="lib/SOURCE_HEADER" classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/peer/**/*Service.java"/>
      <fileset dir="${src.dir}" includes="**/admin/**/*Service.java"/>
    </genservice>
  </target>

  <!-- generates sender and decoder classes for all invocation receiver declarations -->
  <target name="genreceiver" depends="-preptools">
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="compile.classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genreceiver header="lib/SOURCE_HEADER" classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </genreceiver>
  </target>

  <!-- adds readField and writeField methods to Stremable classes -->
  <target name="procstream" depends="-preptools">
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="built.classpath"/>
      <fileset dir="${classes.dir}" includes="**/data/*.class"/>
      <fileset dir="${classes.dir}" includes="**/net/*.class"/>
      <fileset dir="${classes.dir}" includes="**/dobj/*.class"/>
      <fileset dir="${classes.dir}" includes="**/util/*.class"/>
    </instream>
  </target>

  <property name="maven.deploy.repo" value="file://${user.home}/.m2/repository"/>
  <target name="maven-deploy" depends="dist" 
          description="Deploys our build artifacts to a Maven repository.">
    <artifact:deploy file="${deploy.dir}/${ant.project.name}.jar" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="pom"/>
    </artifact:deploy>

    <artifact:pom id="as-pom" file="as-pom.xml"/>
    <artifact:deploy file="${deploy.dir}/${ant.project.name}lib.swc" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="as-pom"/>
    </artifact:deploy>

    <artifact:pom id="gwt-pom" file="gwt-pom.xml"/>
    <artifact:deploy file="${deploy.dir}/${ant.project.name}-gwt.jar" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="gwt-pom"/>
    </artifact:deploy>
  </target>
</project>
