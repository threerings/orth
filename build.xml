<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="orth" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <!-- configuration parameters -->
  <property name="src.dir"      location="core/src/main/java"/>
  <property name="asrc.dir"     location="aslib/src/main/as"/>
  <property name="deploy.dir"   location="dist"/>
  <property name="classes.dir"  location="${deploy.dir}/classes"/>

  <!-- bring in our standard build support -->
  <property name="ooo-build.vers" value="2.9"/>
  <ant antfile="bootstrap.xml"/>
  <import file="${user.home}/.m2/ooo-build/${ooo-build.vers}/ooo-build.xml"/>

  <!-- -prepares the application directories -->
  <target name="prepare" depends="-init-ooo">
    <mavendep pom="core/pom.xml" id="pom"/>

    <!-- we can't use <mavendep> here because we need to exclude our pom depends -->
    <artifact:dependencies filesetId="aslib.fileset" cacheDependencyRefs="true" type="swc"
      dependencyRefsBuildFile="${deploy.dir}/aslib-pom.dependencies">
      <pom file="aslib/pom.xml"/>
    </artifact:dependencies>
    <pathconvert pathsep="," property="aslib.path" refid="aslib.fileset"/>

    <mkdir dir="${classes.dir}"/>
    <path id="build.classpath">
      <pathelement location="${classes.dir}"/>
      <path refid="pom.path"/>
    </path>
  </target>

  <!-- makes sure our tools are compiled and defines the ant tasks -->
  <target name="preptools" depends="prepare">
    <maventaskdef groupId="com.threerings.ant" artifactId="actionscript" version="1.4"/>
    <maventaskdef groupId="com.threerings" artifactId="narya-tools" version="1.10"
      resource="com/threerings/presents/tools.properties"/>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean" depends="-init-contrib">
    <delete>
        <fileset dir="${deploy.dir}" includes="*.jar,*.swc,classes/,docs/"/>
    </delete>
    <cleanmavendepcache pom="pom.xml"/>
    <cleanmavendepcache pom="as-pom.xml"/>
    <cleanmavendepcache id="tools"/>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- this target needs to exist for consistency/sanity relative other projects -->
  <target name="distcleanall" depends="distclean"/>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
      <fileset dir="${src.dir}" includes="**/*.tmpl"/>
    </copy>
    <ooojavac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="build.classpath"/>
  </target>

  <target name="aslib" depends="prepare">
    <maventaskdef groupId="com.threerings.ant" artifactId="actionscript" version="1.4"/>
    <compc srcdir="${asrc.dir}" libpath="${aslib.path}"
        dest="${deploy.dir}/${ant.project.name}lib.swc"/>
  </target>

  <target name="javadoc" depends="prepare" description="Builds the Java documentation">
    <mkdir dir="${deploy.dir}/docs"/>
    <javadoc sourcepath="${src.dir}" packagenames="com.threerings.*"
             destdir="${deploy.dir}/docs" stylesheetfile="docs/stylesheet.css"
             additionalparam="-breakiterator" classpathref="build.classpath">
      <link href="http://download.oracle.com/javase/6/docs/api/"/>
      <link href="http://docs.guava-libraries.googlecode.com/git/javadoc/"/>
      <link href="http://samskivert.googlecode.com/svn/apidocs"/>
      <link href="http://depot.googlecode.com/svn/apidocs/"/>
      <link href="http://www.jajakarta.org/ant/ant-1.6.1/docs/ja/manual/api/"/>
      <link href="http://www.threerings.net/code/narya/docs/api"/>
      <link href="http://www.threerings.net/code/vilya/docs/api"/>
    </javadoc>
  </target>

  <target name="asdoc" depends="prepare" description="Builds the ActionScript documention">
    <maventaskdef groupId="com.threerings.ant" artifactId="actionscript" version="1.4"/>
    <mkdir dir="${deploy.dir}/asdocs"/>
    <asdoc srcdir="${asrc.dir}" libpath="${aslib.path}" destdir="${deploy.dir}/asdocs"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="distall" depends="dist,aslib"/>

  <!-- builds our jar files -->
  <target name="dist" depends="compile,procstream">
    <!-- build our various jar files -->
    <jar destfile="${deploy.dir}/${ant.project.name}.jar" basedir="${classes.dir}"/>
  </target>

  <!-- reorders our actionscript imports -->
  <target name="asimports" depends="preptools" description="Reorders actionscript imports">
    <asimports srcdir="${asrc.dir}"/>
  </target>

  <target name="gencode" depends="gendobj,genreceiver,genrecord,genservice,genstreamable"
    description="Runs all gen tasks"/>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="prepare">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="build.classpath"/>
    <!-- make sure the record class files are all compiled -->
    <ooojavac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="build.classpath">
      <include name="**/*Record.java"/>
      <exclude name="com/threerings/orth/party/**/*.java"/>
    </ooojavac>
    <!-- now update the source files -->
    <grecord classpathref="build.classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="preptools">
    <!-- make sure the dobject class files are all compiled -->
    <ooojavac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="build.classpath">
      <include name="**/*Object.java"/>
    </ooojavac>
    <!-- now generate the associated files -->
    <gendobj classpathref="build.classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </gendobj>
    <genascriptstreamable classpathref="build.classpath" header="lib/SOURCE_HEADER"
      asroot="${asrc.dir}">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </genascriptstreamable>
    <asimports/>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation service declarations -->
  <target name="genservice" depends="preptools">
    <!-- make sure the service class files are all compiled -->
    <ooojavac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="build.classpath">
      <include name="**/*Service.java"/>
      <exclude name="**/InvocationService.java"/>
    </ooojavac>
    <!-- now generate the associated files -->
    <genservice header="lib/SOURCE_HEADER" asroot="src/main/as" classpathref="build.classpath">
      <fileset dir="${src.dir}" includes="**/*Service.java">
        <exclude name="**/InvocationService.java"/>
        <exclude name="**/peer/**"/>
        <exclude name="**/admin/**"/>
      </fileset>
      <providerless service="ChatService"/>
      <providerless service="SimulatorService"/>
      <providerless service="TimeBaseService"/>
    </genservice>
    <genservice header="lib/SOURCE_HEADER" classpathref="build.classpath">
      <fileset dir="${src.dir}" includes="**/peer/**/*Service.java"/>
      <fileset dir="${src.dir}" includes="**/admin/**/*Service.java"/>
    </genservice>
    <asimports/>
  </target>

  <!-- generates sender and decoder classes for all invocation receiver declarations -->
  <target name="genreceiver" depends="preptools">
    <!-- make sure the receiver class files are all compiled -->
    <ooojavac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="build.classpath">
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </ooojavac>
    <!-- now generate the associated files -->
    <genreceiver header="lib/SOURCE_HEADER" classpathref="build.classpath" asroot="src/main/as">
      <fileset dir="${src.dir}" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </genreceiver>
    <asimports/>
  </target>

  <target name="genstreamable" depends="preptools">
      <!-- make sure the streamable class files are all compiled -->
      <ooojavac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="build.classpath">
        <include name="**/data/*.java"/>
      </ooojavac>
     <genascriptstreamable classpathref="build.classpath" header="lib/SOURCE_HEADER"
                           asroot="${asrc.dir}">
       <fileset dir="${src.dir}">
         <include name="**/data/*.java"/>
         <include name="com/threerings/orth/data/where/*.java"/>
         <exclude name="com/threerings/orth/peer/**/*.java"/>
         <exclude name="**/*Object.java"/>
         <exclude name="**/*_CustomFieldSerializer.java"/>
         <!-- flips out on generics -->
         <exclude name="com/threerings/orth/room/data/Entity*.java"/>
       </fileset>
     </genascriptstreamable>
     <asimports/>
  </target>

  <!-- adds readField and writeField methods to Stremable classes -->
  <target name="procstream" depends="preptools">
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="build.classpath"/>
      <fileset dir="${classes.dir}" includes="**/data/*.class"/>
      <fileset dir="${classes.dir}" includes="**/net/*.class"/>
      <fileset dir="${classes.dir}" includes="**/dobj/*.class"/>
      <fileset dir="${classes.dir}" includes="**/util/*.class"/>
    </instream>
  </target>

  <target name="install" depends="distall"
          description="Installs artifacts to local Maven repository.">
    <maveninstall file="pom.xml" pom="pom.xml"/>
    <maveninstall file="${deploy.dir}/${ant.project.name}.jar" pom="core/pom.xml"/>
    <maveninstall file="${deploy.dir}/${ant.project.name}lib.swc" pom="aslib/pom.xml"/>
  </target>

  <target name="deploy" depends="distall,javadoc"
      description="Deploys our build artifacts to a Maven repository.">
    <mavendeploy file="pom.xml" pom="pom.xml"/>
    <mavendeploy file="${deploy.dir}/${ant.project.name}.jar" pom="core/pom.xml"
                 srcdir="${src.dir}" docdir="${deploy.dir}/docs"/>
    <mavendeploy file="${deploy.dir}/${ant.project.name}lib.swc" pom="aslib/pom.xml"
                 srcdir="${asrc.dir}"/>
  </target>
</project>
